const fs = require('fs');
const path = require('path');

let wasmVulnerabilityScannerModule;
let vulnerabilityScannerExports;

async function loadVulnerabilityScannerWasm() {
    const wasmScannerPath = path.resolve(__dirname, 'vulnerability_scanner.wasm');
    const scannerWasmBuffer = fs.readFileSync(wasmScannerPath);
    const scannerWasmInstance = await WebAssembly.instantiate(scannerWasmBuffer);
    wasmVulnerabilityScannerModule = scannerWasmInstance.instance;
    vulnerabilityScannerExports = wasmVulnerabilityScannerModule.exports;
}

function initVulnerabilityScanner() {
    if (!vulnerabilityScannerExports) {
        throw new Error('VulnerabilityScanner is not yet loaded.');
    }
    vulnerabilityScannerExports.initializeScanner();
}

function scanForVulnerabilities(scanData) {
    if (!vulnerabilityScannerExports) {
        throw new Error('VulnerabilityScanner is not initialized.');
    }
    const encodedScanData = encodeScanData(scanData);
    const scanResultPointer = vulnerabilityScannerExports.scan(encodedScanData);
    return decodeScanResult(scanResultPointer);
}

function encodeScanData(scanData) {
    const scanDataBuffer = Buffer.from(JSON.stringify(scanData));
    const encodedScanDataPtr = vulnerabilityScannerExports.allocateScanMemory(scanDataBuffer.length);
    new Uint8Array(wasmVulnerabilityScannerModule.memory.buffer, encodedScanDataPtr, scanDataBuffer.length).set(scanDataBuffer);
    return encodedScanDataPtr;
}

function decodeScanResult(resultPointer) {
    const resultLength = vulnerabilityScannerExports.getScanResultLength(resultPointer);
    const scanResultBuffer = new Uint8Array(wasmVulnerabilityScannerModule.memory.buffer, resultPointer, resultLength);
    return new TextDecoder().decode(scanResultBuffer);
}

async function loadAndPerformVulnerabilityScan(scanData) {
    await loadVulnerabilityScannerWasm();
    initVulnerabilityScanner();
    const scanOutcome = scanForVulnerabilities(scanData);
    console.log(scanOutcome);
}

module.exports = {
    loadAndPerformVulnerabilityScan
};
